name: gitStream workflow automation
run-name: |
  /:\ gitStream: PR #${{ github.event.number }} from ${{ github.event.pull_request.head.repo.full_name }}

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  gitStream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      # Install dependencies for gitStream rules
      - name: Install Node.js dependencies
        run: npm install

      # Evaluate GitStream Rules
      - name: Evaluate GitStream Rules
        uses: linear-b/gitstream-github-action@v2  # Ensure the correct version is used
        id: rules-engine
        with:
          full_repository: ${{ github.repository }}
          head_ref: ${{ github.head_ref }}
          base_ref: ${{ github.base_ref }}
          client_payload: ${{ github.event.client_payload }}
          installation_id: ${{ github.event.installation_id }}
          resolver_url: ${{ github.event.resolver_url }}
          resolver_token: ${{ github.event.resolver_token }}

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      # Install Node.js dependencies to run ESLint
      - name: Install dependencies
        run: npm ci

      # Run ESLint
      - name: Run ESLint
        id: lint
        run: npm run lint -- --format checkstyle --output-file eslint-report.xml
        continue-on-error: true

      # Upload ESLint report
      - name: Upload ESLint report
        uses: actions/upload-artifact@v1
        with:
          name: eslint-report
          path: eslint-report.xml

      # Create ESLint Check Run
      - name: Create ESLint Check Run
        uses: actions/github-script@v6
        with:
          script: |
            const headSha = context.payload.pull_request.head.sha;
            if (!headSha) {
              throw new Error('No head SHA available for the pull request.');
            }
            const conclusion = '${{ steps.lint.outcome }}' === 'success' ? 'success' : 'failure';
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'ESLint',
              head_sha: headSha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: 'ESLint Check',
                summary: 'ESLint issues reported in this run',
                text: 'Check the ESLint report for detailed errors or warnings.'
              }
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      # Install dependencies for testing
      - name: Install Node.js dependencies
        run: npm install

      # Run tests (ensure Jest is installed and configured in package.json)
      - name: Run Unit Tests
        run: npm test -- --ci --reporter=jest-junit --outputFile=unit-test-results.xml
        continue-on-error: true

      # Upload test results
      - name: Upload test results
        uses: actions/upload-artifact@v1
        with:
          name: unit-test-results
          path: unit-test-results.xml

      # Create a Check Run for test results
      - name: Create Test Check Run
        uses: actions/github-script@v6
        with:
          script: |
            const headSha = context.payload.pull_request.head.sha;
            if (!headSha) {
              throw new Error('No head SHA available for the pull request.');
            }
            const conclusion = '${{ steps.test.outcome }}' === 'success' ? 'success' : 'failure';
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Unit Tests',
              head_sha: headSha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: 'Unit Test Check',
                summary: 'Unit test results',
                text: 'Check the test report for details.'
              }
            });
